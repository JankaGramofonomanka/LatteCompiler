-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module FromBNFC.LexLatte where



import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$l = [a-zA-Z\192 - \255] # [\215 \247]    -- isolatin1 letter FIXME
$c = [A-Z\192-\221] # [\215]    -- capital isolatin1 letter FIXME
$s = [a-z\222-\255] # [\247]    -- small isolatin1 letter FIXME
$d = [0-9]                -- digit
$i = [$l $d _ ']          -- identifier character
$u = [\0-\255]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \( | \) | \, | \= | \+ \+ | \- \- | \[ | \] | \: | \.

:-
"#" [.]* ; -- Toss single line comments
"//" [.]* ; -- Toss single line comments
"/*" ([$u # \*] | \*+ [$u # [\* \/]])* ("*")+ "/" ;

$white+ ;
@rsyms { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
t r u e { tok (\p s -> PT p (eitherResIdent (T_PTrue . share) s)) }
f a l s e { tok (\p s -> PT p (eitherResIdent (T_PFalse . share) s)) }
i n t { tok (\p s -> PT p (eitherResIdent (T_PTypeInt . share) s)) }
s t r i n g { tok (\p s -> PT p (eitherResIdent (T_PTypeStr . share) s)) }
b o o l e a n { tok (\p s -> PT p (eitherResIdent (T_PTypeBool . share) s)) }
v o i d { tok (\p s -> PT p (eitherResIdent (T_PTypeVoid . share) s)) }
\+ { tok (\p s -> PT p (eitherResIdent (T_PPlus . share) s)) }
\- { tok (\p s -> PT p (eitherResIdent (T_PMinus . share) s)) }
\* { tok (\p s -> PT p (eitherResIdent (T_PTimes . share) s)) }
\/ { tok (\p s -> PT p (eitherResIdent (T_PDiv . share) s)) }
\% { tok (\p s -> PT p (eitherResIdent (T_PMod . share) s)) }
\< { tok (\p s -> PT p (eitherResIdent (T_PLTH . share) s)) }
\< \= { tok (\p s -> PT p (eitherResIdent (T_PLE . share) s)) }
\> { tok (\p s -> PT p (eitherResIdent (T_PGTH . share) s)) }
\> \= { tok (\p s -> PT p (eitherResIdent (T_PGE . share) s)) }
\= \= { tok (\p s -> PT p (eitherResIdent (T_PEQU . share) s)) }
\! \= { tok (\p s -> PT p (eitherResIdent (T_PNE . share) s)) }
\& \& { tok (\p s -> PT p (eitherResIdent (T_PAnd . share) s)) }
\| \| { tok (\p s -> PT p (eitherResIdent (T_POr . share) s)) }
\! { tok (\p s -> PT p (eitherResIdent (T_PNot . share) s)) }
\{ { tok (\p s -> PT p (eitherResIdent (T_PLBrace . share) s)) }
\} { tok (\p s -> PT p (eitherResIdent (T_PRBrace . share) s)) }
\; { tok (\p s -> PT p (eitherResIdent (T_PSemiColon . share) s)) }
i f { tok (\p s -> PT p (eitherResIdent (T_PIf . share) s)) }
e l s e { tok (\p s -> PT p (eitherResIdent (T_PElse . share) s)) }
w h i l e { tok (\p s -> PT p (eitherResIdent (T_PWhile . share) s)) }
f o r { tok (\p s -> PT p (eitherResIdent (T_PFor . share) s)) }
r e t u r n { tok (\p s -> PT p (eitherResIdent (T_PReturn . share) s)) }
n e w { tok (\p s -> PT p (eitherResIdent (T_PNew . share) s)) }
c l a s s { tok (\p s -> PT p (eitherResIdent (T_PClass . share) s)) }
e x t e n d s { tok (\p s -> PT p (eitherResIdent (T_PExtends . share) s)) }
n u l l { tok (\p s -> PT p (eitherResIdent (T_PNull . share) s)) }
$l ($l | $d | \_ | \')* { tok (\p s -> PT p (eitherResIdent (T_PIdent . share) s)) }
$d + { tok (\p s -> PT p (eitherResIdent (T_PInteger . share) s)) }
\" ($u # [\" \\]| \\ [\" \\ t n r f]) * \" { tok (\p s -> PT p (eitherResIdent (T_PString . share) s)) }

$l $i*   { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }





{

tok :: (Posn -> String -> Token) -> (Posn -> String -> Token)
tok f p s = f p s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals
 | T_PTrue !String
 | T_PFalse !String
 | T_PTypeInt !String
 | T_PTypeStr !String
 | T_PTypeBool !String
 | T_PTypeVoid !String
 | T_PPlus !String
 | T_PMinus !String
 | T_PTimes !String
 | T_PDiv !String
 | T_PMod !String
 | T_PLTH !String
 | T_PLE !String
 | T_PGTH !String
 | T_PGE !String
 | T_PEQU !String
 | T_PNE !String
 | T_PAnd !String
 | T_POr !String
 | T_PNot !String
 | T_PLBrace !String
 | T_PRBrace !String
 | T_PSemiColon !String
 | T_PIf !String
 | T_PElse !String
 | T_PWhile !String
 | T_PFor !String
 | T_PReturn !String
 | T_PNew !String
 | T_PClass !String
 | T_PExtends !String
 | T_PNull !String
 | T_PIdent !String
 | T_PInteger !String
 | T_PString !String

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

tokenPos :: [Token] -> String
tokenPos (PT (Pn _ l _) _ :_) = "line " ++ show l
tokenPos (Err (Pn _ l _) :_) = "line " ++ show l
tokenPos _ = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken :: Token -> String
prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  PT _ (T_PTrue s) -> s
  PT _ (T_PFalse s) -> s
  PT _ (T_PTypeInt s) -> s
  PT _ (T_PTypeStr s) -> s
  PT _ (T_PTypeBool s) -> s
  PT _ (T_PTypeVoid s) -> s
  PT _ (T_PPlus s) -> s
  PT _ (T_PMinus s) -> s
  PT _ (T_PTimes s) -> s
  PT _ (T_PDiv s) -> s
  PT _ (T_PMod s) -> s
  PT _ (T_PLTH s) -> s
  PT _ (T_PLE s) -> s
  PT _ (T_PGTH s) -> s
  PT _ (T_PGE s) -> s
  PT _ (T_PEQU s) -> s
  PT _ (T_PNE s) -> s
  PT _ (T_PAnd s) -> s
  PT _ (T_POr s) -> s
  PT _ (T_PNot s) -> s
  PT _ (T_PLBrace s) -> s
  PT _ (T_PRBrace s) -> s
  PT _ (T_PSemiColon s) -> s
  PT _ (T_PIf s) -> s
  PT _ (T_PElse s) -> s
  PT _ (T_PWhile s) -> s
  PT _ (T_PFor s) -> s
  PT _ (T_PReturn s) -> s
  PT _ (T_PNew s) -> s
  PT _ (T_PClass s) -> s
  PT _ (T_PExtends s) -> s
  PT _ (T_PNull s) -> s
  PT _ (T_PIdent s) -> s
  PT _ (T_PInteger s) -> s
  PT _ (T_PString s) -> s


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords :: BTree
resWords = b "." 6 (b "++" 3 (b ")" 2 (b "(" 1 N N) N) (b "--" 5 (b "," 4 N N) N)) (b "[" 9 (b "=" 8 (b ":" 7 N N) N) (b "]" 10 N N))
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
