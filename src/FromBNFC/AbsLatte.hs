

module FromBNFC.AbsLatte where

-- Haskell module generated by the BNF converter




newtype PTrue = PTrue ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PFalse = PFalse ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PTypeInt = PTypeInt ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PTypeStr = PTypeStr ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PTypeBool = PTypeBool ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PTypeVoid = PTypeVoid ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PPlus = PPlus ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PMinus = PMinus ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PTimes = PTimes ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PDiv = PDiv ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PMod = PMod ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PLTH = PLTH ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PLE = PLE ((Int,Int),String) deriving (Eq, Ord, Show, Read)
newtype PGTH = PGTH ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PGE = PGE ((Int,Int),String) deriving (Eq, Ord, Show, Read)
newtype PEQU = PEQU ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PNE = PNE ((Int,Int),String) deriving (Eq, Ord, Show, Read)
newtype PAnd = PAnd ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype POr = POr ((Int,Int),String) deriving (Eq, Ord, Show, Read)
newtype PNot = PNot ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PLBrace = PLBrace ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PRBrace = PRBrace ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PSemiColon = PSemiColon ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PIf = PIf ((Int,Int),String) deriving (Eq, Ord, Show, Read)
newtype PElse = PElse ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PWhile = PWhile ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PFor = PFor ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PReturn = PReturn ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PNew = PNew ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PClass = PClass ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PExtends = PExtends ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PIdent = PIdent ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PInteger = PInteger ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype PString = PString ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef
    = FnDef Type PIdent [Param] Block
    | BaseClassDef PClass PIdent ClassBody
    | ChildClassDef PClass PIdent PExtends PIdent ClassBody
  deriving (Eq, Ord, Show, Read)

data Param = Param Type PIdent
  deriving (Eq, Ord, Show, Read)

data Block = Block PLBrace [Stmt] PRBrace
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty PSemiColon
    | BStmt Block
    | Decl Type [Item] PSemiColon
    | Ass Var Expr PSemiColon
    | Incr Var PSemiColon
    | Decr Var PSemiColon
    | Ret PReturn Expr PSemiColon
    | VRet PReturn PSemiColon
    | Cond PIf Expr Stmt
    | CondElse PIf Expr Stmt PElse Stmt
    | While PWhile Expr Stmt
    | SExp Expr PSemiColon
    | For PFor Type PIdent Var Stmt
  deriving (Eq, Ord, Show, Read)

data Item = NoInit PIdent | Init PIdent Expr
  deriving (Eq, Ord, Show, Read)

data Type
    = Int PTypeInt
    | Str PTypeStr
    | Bool PTypeBool
    | Void PTypeVoid
    | Arr Type
    | Custom PIdent
  deriving (Eq, Ord, Show, Read)

data Var = Var PIdent | Member Var PIdent | Elem Var Expr
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Var
    | ELitInt PInteger
    | ELitTrue PTrue
    | ELitFalse PFalse
    | EApp Var [Expr]
    | EString PString
    | Neg PMinus Expr
    | Not PNot Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr AndOp Expr
    | EOr Expr OrOp Expr
    | NewArr PNew Type Expr
    | NewObj PNew PIdent
    | Cast Type Expr
    | CastE Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus PPlus | Minus PMinus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times PTimes | Div PDiv | Mod PMod
  deriving (Eq, Ord, Show, Read)

data RelOp
    = LTH PLTH | LE PLE | GTH PGTH | GE PGE | EQU PEQU | NE PNE
  deriving (Eq, Ord, Show, Read)

data AndOp = And PAnd
  deriving (Eq, Ord, Show, Read)

data OrOp = Or POr
  deriving (Eq, Ord, Show, Read)

data ClassBody = ClassBody PLBrace [MemberDecl] PRBrace
  deriving (Eq, Ord, Show, Read)

data MemberDecl
    = AttrDecl Type PIdent PSemiColon | MethodDecl TopDef
  deriving (Eq, Ord, Show, Read)

